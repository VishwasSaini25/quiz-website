{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Quizproblem from './Quizproblem';\nimport Button from 'react-bootstrap/Button';\nimport \"./QuizApi.css\";\nimport { useHistory } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quizapi(props) {\n  _s();\n\n  var comp = 0;\n  const History = useHistory();\n  const API_URL = \"https://opentdb.com/api.php?amount=10&category=18&difficulty=medium&type=multiple\";\n  const [questions, setquestions] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [Score, Setscore] = useState(0);\n  useEffect(() => {\n    Axios.get(API_URL).then(res => res.data).then(data => {\n      if (data.results) {\n        const problem = data.results.map(question => ({ ...question,\n          answers: [question.correct_answer, ...question.incorrect_answers].sort(() => Math.random() - 0.5)\n        }));\n        setquestions(problem);\n      }\n    });\n  }, []);\n\n  const handleAnswer = answer => {\n    if (answer === questions[currentIndex].correct_answer) {\n      Setscore(Score + 1);\n    }\n  };\n\n  function handlePrev() {\n    if (currentIndex === 0) {\n      alert(\"are u an idiot....You want to go at 0th question\");\n    } else setCurrentIndex(currentIndex - 1);\n  }\n\n  function handleNext() {\n    setCurrentIndex(currentIndex + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Quizapi, \"+lIMTynlTMFR3+Q4gqPs1+QsITk=\", false, function () {\n  return [useHistory];\n});\n\n_c = Quizapi;\nexport default Quizapi;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quizapi\");","map":{"version":3,"sources":["C:/Users/yash/Desktop/quiz/my-quiz-website/src/components/Quizapi/Quizapi.jsx"],"names":["React","useState","useEffect","Quizproblem","Button","useHistory","Axios","Quizapi","props","comp","History","API_URL","questions","setquestions","currentIndex","setCurrentIndex","Score","Setscore","get","then","res","data","results","problem","map","question","answers","correct_answer","incorrect_answers","sort","Math","random","handleAnswer","answer","handlePrev","alert","handleNext"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,eAAP;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,OAAOC,KAAP,MAAkB,OAAlB;;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAuB;AAAA;;AACnB,MAAIC,IAAI,GAAE,CAAV;AACA,QAAMC,OAAO,GAAGL,UAAU,EAA1B;AACA,QAAMM,OAAO,GAAG,mFAAhB;AACA,QAAM,CAACC,SAAD,EAAWC,YAAX,IAA2BZ,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACa,YAAD,EAAcC,eAAd,IAAiCd,QAAQ,CAAC,CAAD,CAA/C;AACA,QAAM,CAACe,KAAD,EAAOC,QAAP,IAAmBhB,QAAQ,CAAC,CAAD,CAAjC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,KAAK,CAACY,GAAN,CAAUP,OAAV,EACCQ,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IADjB,EAECF,IAFD,CAEME,IAAI,IAAG;AACT,UAAGA,IAAI,CAACC,OAAR,EAAgB;AAChB,cAAMC,OAAO,GAAGF,IAAI,CAACC,OAAL,CAAaE,GAAb,CAAkBC,QAAD,KAAe,EAC5C,GAAGA,QADyC;AAE5CC,UAAAA,OAAO,EAAC,CAACD,QAAQ,CAACE,cAAV,EAA0B,GAAGF,QAAQ,CAACG,iBAAtC,EAAyDC,IAAzD,CAA8D,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAApF;AAFoC,SAAf,CAAjB,CAAhB;AAKAlB,QAAAA,YAAY,CAACU,OAAD,CAAZ;AACH;AACA,KAXD;AAYH,GAbQ,EAaP,EAbO,CAAT;;AAeA,QAAMS,YAAY,GAAIC,MAAD,IAAY;AACzB,QAAGA,MAAM,KAAKrB,SAAS,CAACE,YAAD,CAAT,CAAwBa,cAAtC,EAAqD;AACjDV,MAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACH;AAER,GALD;;AAMA,WAASkB,UAAT,GAAqB;AACjB,QAAGpB,YAAY,KAAK,CAApB,EAAsB;AAClBqB,MAAAA,KAAK,CAAC,kDAAD,CAAL;AACH,KAFD,MAGKpB,eAAe,CAACD,YAAY,GAAC,CAAd,CAAf;AACR;;AACD,WAASsB,UAAT,GAAqB;AAEjBrB,IAAAA,eAAe,CAACD,YAAY,GAAC,CAAd,CAAf;AAEH;;AACL,sBAAO,qCAAP;AAiBC;;GAxDQP,O;UAEWF,U;;;KAFXE,O;AA4DT,eAAeA,OAAf","sourcesContent":["import React, {useState , useEffect} from \"react\";\r\nimport Quizproblem from './Quizproblem';\r\nimport Button from 'react-bootstrap/Button'\r\nimport \"./QuizApi.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nimport Axios from \"axios\";\r\nfunction Quizapi(props){\r\n    var comp =0 ;\r\n    const History = useHistory();\r\n    const API_URL = \"https://opentdb.com/api.php?amount=10&category=18&difficulty=medium&type=multiple\";\r\n    const [questions,setquestions] = useState([]);\r\n    const [currentIndex,setCurrentIndex] = useState(0);\r\n    const [Score,Setscore] = useState(0);\r\n    useEffect(() => {\r\n        Axios.get(API_URL)\r\n        .then(res => res.data)\r\n        .then(data =>{\r\n            if(data.results){\r\n            const problem = data.results.map((question) => ({\r\n                ...question,\r\n                answers:[question.correct_answer, ...question.incorrect_answers].sort(() => Math.random() - 0.5)\r\n            }))\r\n\r\n            setquestions(problem);\r\n        }\r\n        })\r\n    },[])\r\n   \r\n    const handleAnswer = (answer) => {\r\n            if(answer === questions[currentIndex].correct_answer){\r\n                Setscore(Score+1);\r\n            }\r\n           \r\n    }\r\n    function handlePrev(){\r\n        if(currentIndex === 0){\r\n            alert(\"are u an idiot....You want to go at 0th question\");\r\n        } else\r\n             setCurrentIndex(currentIndex-1);\r\n    }\r\n    function handleNext(){\r\n        \r\n        setCurrentIndex(currentIndex+1);\r\n      \r\n    }\r\nreturn <>   \r\n            {/* <div className=\"quiz-api-body\">\r\n               {(questions.length > 0) ? (\r\n                \r\n               (currentIndex >= questions.length) ? ( <div>\r\n                <h1>Quiz Ended, Your Score is {Score}/10</h1>\r\n                <Button onClick={() => History.push(\"/quiz\")} className=\"button-rtn1\" variant=\"outline-primary\">go back to homepage</Button>\r\n                <Button onClick={() => History.push(\"/certificates\")} className=\"button-rtn2\" variant=\"outline-primary\">go back to certificate page </Button>\r\n               </div>\r\n\r\n               ) : \r\n               (<div className=\"quiz-api-questionBlock\">\r\n               <Quizproblem comp={comp}  handlePrev={handlePrev}  handleNext={handleNext} handleAnswer={handleAnswer} currentIndex={currentIndex+1} data={questions[currentIndex]} />\r\n               </div> )\r\n                )  : \"Loading....\" }  \r\n            </div> */}\r\n    </>\r\n}\r\n\r\n   \r\n\r\nexport default Quizapi;"]},"metadata":{},"sourceType":"module"}